<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker基本使用</title>
    <link href="/2020/11/30/Docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/11/30/Docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Linux安装Docker及Docker基本使用，B站链接：<a href="https://www.bilibili.com/video/BV1sK4y1s7Cj?p=15">https://www.bilibili.com/video/BV1sK4y1s7Cj?p=15</a> 。</p><a id="more"></a><h3 id="一-Docker的基本操作"><a href="#一-Docker的基本操作" class="headerlink" title="一.Docker的基本操作"></a>一.Docker的基本操作</h3><h4 id="1-1-安装Docker"><a href="#1-1-安装Docker" class="headerlink" title="1.1 安装Docker"></a>1.1 安装Docker</h4><pre><code class="hljs sh"><span class="hljs-comment"># 1. 下载关于Docker的依赖环境</span>yum -y install yum-utils device-mapper-persistent-data lvm2</code></pre><hr><pre><code class="hljs sh"><span class="hljs-comment"># 2. 设置一下下载Docker的镜像源</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre><hr><pre><code class="hljs sh"><span class="hljs-comment"># 3. 安装Docker</span>yum makecache fastyum -y install docker-ce</code></pre><hr><pre><code class="hljs sh"><span class="hljs-comment"># 4. 启动，并设置为开机自动启动，测试</span><span class="hljs-comment"># 启动Docker服务</span>systemctl start docker<span class="hljs-comment"># 设置开机自动启动</span>systemctl <span class="hljs-built_in">enable</span> docker<span class="hljs-comment"># 测试</span>docker run hello-world</code></pre><h4 id="1-2-Docker中央仓库"><a href="#1-2-Docker中央仓库" class="headerlink" title="1.2 Docker中央仓库"></a>1.2 Docker中央仓库</h4><blockquote><ol><li>Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度很慢。<a href="https://hub.docker.com/">https://hub.docker.com</a></li><li>国内的镜像网站：网易蜂巢、daoCloud…</li></ol><p>​    <a href="https://c.163yun.com/hub#/home">https://c.163yun.com/hub#/home</a></p><p>​    <a href="http://hub.daocloud.io/">http://hub.daocloud.io</a> (推荐使用)</p><ol><li>在公司内部会采用私服的方式拉取镜像。（添加配置）</li></ol></blockquote><pre><code class="hljs json"># 需要在/etc/docker/daemon.json&#123;<span class="hljs-attr">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>],    <span class="hljs-attr">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;ip:port&quot;</span>]&#125;# 重启两个服务systemctl daemon-reloadsystemctl restart docker</code></pre><h4 id="1-3-镜像的操作"><a href="#1-3-镜像的操作" class="headerlink" title="1.3 镜像的操作"></a>1.3 镜像的操作</h4><pre><code class="hljs sh"><span class="hljs-comment"># 拉取镜像到本地</span>docker pull 镜像名称[:tag]<span class="hljs-comment"># 举个例子</span>docker pull tomcat daocloud.io/library/tomcat:8.5.15-jre8</code></pre><hr><pre><code class="hljs sh"><span class="hljs-comment"># 2. 查看全部本地的镜像</span>docker images</code></pre><hr><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 3. 删除本地镜像</span>docker rmi 镜像的标识</code></pre><hr><pre><code class="hljs sh"><span class="hljs-comment"># 4. 镜像的导入导出（不规范）</span><span class="hljs-comment"># 将本地的镜像导出</span>docker save -o 导出的路径 镜像id<span class="hljs-comment"># 加载本地的镜像文件</span>docker load -i 镜像文件<span class="hljs-comment"># 修改镜像名称</span>docker tag 镜像id 新镜像名称:版本</code></pre><h4 id="1-4-容器的操作"><a href="#1-4-容器的操作" class="headerlink" title="1.4 容器的操作"></a>1.4 容器的操作</h4><pre><code class="hljs sh"><span class="hljs-comment"># 1. 运行容器</span><span class="hljs-comment"># 简单操作</span>docker run 镜像的标识|镜像名称[:tag]<span class="hljs-comment"># 常用的参数</span>docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]<span class="hljs-comment"># -d：代表后台运行容器</span><span class="hljs-comment"># -p 宿主机端口:容器端口：为了映射当前Linux端口和容器端口</span><span class="hljs-comment"># --name 容器名称：指定容器的名称</span></code></pre><hr><pre><code class="hljs sh"><span class="hljs-comment"># 2. 查看正在运行的容器</span>docker ps [-qa]<span class="hljs-comment"># -a：查看全部的容器，包括没有运行</span><span class="hljs-comment"># -p：只查看容器得到标识</span></code></pre><pre><code class="hljs sh"><span class="hljs-comment"># 3. 查看容器的日志</span>docker logs -f 容器id<span class="hljs-comment"># -f：可以滚动查看日志的最后几行</span></code></pre><hr><pre><code class="hljs sh"><span class="hljs-comment"># 4. 进入到容器内部</span>docker <span class="hljs-built_in">exec</span> -it 容器id bash</code></pre><hr><pre><code class="hljs sh"><span class="hljs-comment"># 5. 删除容器（删除容器前，需要停止容器）</span><span class="hljs-comment"># 停止指定的容器</span>docker stop 容器id<span class="hljs-comment"># 停止全部容器</span>docker stop $(docker pa -qa)<span class="hljs-comment"># 删除指定的容器</span>docker rm 容器id<span class="hljs-comment"># 删除全部容器</span>docker rm $(docker pa -qa)</code></pre><hr><pre><code class="hljs sh"><span class="hljs-comment"># 6. 启动容器</span>docker start 容器id</code></pre><h3 id="二-Docker应用"><a href="#二-Docker应用" class="headerlink" title="二.Docker应用"></a>二.Docker应用</h3><h3 id="三-Docker自定义镜像"><a href="#三-Docker自定义镜像" class="headerlink" title="三.Docker自定义镜像"></a>三.Docker自定义镜像</h3><h3 id="四-Docker-compose"><a href="#四-Docker-compose" class="headerlink" title="四.Docker-compose"></a>四.Docker-compose</h3>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>Linux软件</category>
      
      <category>Docker</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx的安装</title>
    <link href="/2020/11/23/Nginx%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2020/11/23/Nginx%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>CentOS安装Nginx，文章在<a href="https://www.cnblogs.com/liujuncm5/p/6713784.html">https://www.cnblogs.com/liujuncm5/p/6713784.html</a> 之上修改。</p><a id="more"></a><h2 id="一-gcc-安装"><a href="#一-gcc-安装" class="headerlink" title="一. gcc 安装"></a><strong>一. gcc 安装</strong></h2><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p><pre><code class="hljs shell">yum install gcc-c++</code></pre><h2 id="二-PCRE-pcre-devel-安装"><a href="#二-PCRE-pcre-devel-安装" class="headerlink" title="二. PCRE pcre-devel 安装"></a><strong>二. PCRE pcre-devel 安装</strong></h2><p>PCRE(Perl Compatible  Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre  来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre  开发的一个二次开发库。nginx也需要此库。命令：</p><pre><code class="hljs shell">yum install -y pcre pcre-devel</code></pre><h2 id="三-zlib-安装"><a href="#三-zlib-安装" class="headerlink" title="三. zlib 安装"></a><strong>三. zlib 安装</strong></h2><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><pre><code class="hljs nsis">yum install -y <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel</code></pre><h2 id="四-OpenSSL-安装"><a href="#四-OpenSSL-安装" class="headerlink" title="四. OpenSSL 安装"></a><strong>四. OpenSSL 安装</strong></h2><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p><pre><code class="hljs shell">yum install -y openssl openssl-devel</code></pre><h2 id="五-使用wget命令下载（推荐）。"><a href="#五-使用wget命令下载（推荐）。" class="headerlink" title="五. 使用wget命令下载（推荐）。"></a><strong>五. 使用<code>wget</code>命令下载（推荐）。</strong></h2><p>确保系统已经安装了wget，如果没有安装，执行 yum install wget 安装。</p><p>也可直接去<a href="http://nginx.org/">官网</a>下载（不推荐）。</p><pre><code class="hljs shell">wget -c https://nginx.org/download/nginx-1.18.0.tar.gz</code></pre><h2 id="六-解压"><a href="#六-解压" class="headerlink" title="六. 解压"></a><strong>六. 解压</strong></h2><pre><code class="hljs shell">tar -zxvf nginx-1.12.0.tar.gzcd nginx-1.12.0</code></pre><h2 id="七-配置"><a href="#七-配置" class="headerlink" title="七. 配置"></a><strong>七. 配置</strong></h2><p>使用默认配置：</p><pre><code class="hljs shell">./configure</code></pre><h2 id="八-编译安装"><a href="#八-编译安装" class="headerlink" title="八. 编译安装"></a><strong>八. 编译安装</strong></h2><pre><code class="hljs shell">make &amp;&amp; make install</code></pre><p>查找安装路径：</p><pre><code class="hljs shell">whereis nginx</code></pre><h2 id="九-启动和停止Nginx"><a href="#九-启动和停止Nginx" class="headerlink" title="九. 启动和停止Nginx"></a><strong>九. 启动和停止Nginx</strong></h2><pre><code class="hljs shell">cd /usr/local/nginx/sbin/./nginx ./nginx -s stop./nginx -s quit./nginx -s reload</code></pre><p>查询nginx进程：</p><pre><code class="hljs shell">ps aux|grep nginx</code></pre><h2 id="十-重启Nginx"><a href="#十-重启Nginx" class="headerlink" title="十. 重启Nginx"></a><strong>十. 重启Nginx</strong></h2><p>先停止再启动（推荐）：<br>对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。如下：</p><pre><code class="hljs shell">./nginx -s quit./nginx</code></pre><p>重新加载配置文件：<br>当 nginx的配置文件 <code>nginx.conf</code> 修改后，要想让配置生效需要重启 nginx，使用<code>-s reload</code>不用先停止 nginx再启动 nginx 即可将配置信息在 nginx 中生效，如下：</p><pre><code class="hljs shell">/nginx -s reload</code></pre><h2 id="十一-查看开放的端口号，打开端口"><a href="#十一-查看开放的端口号，打开端口" class="headerlink" title="十一. 查看开放的端口号，打开端口"></a><strong>十一. 查看开放的端口号，打开端口</strong></h2><p>查看开放的端口号 </p><pre><code class="hljs shell">firewall-cmd --list-all</code></pre><p>设置开放的端口号 </p><pre><code class="hljs shell">firewall-cmd --add-service=http –permanent sudo firewall-cmd --add-port=80/tcp --permanent</code></pre><p>重启防火墙 </p><pre><code class="hljs shell">firewall-cmd –reload</code></pre><h2 id="END-现在可以通过输入服务器ip-80看到Nginx的欢迎页面了"><a href="#END-现在可以通过输入服务器ip-80看到Nginx的欢迎页面了" class="headerlink" title="END. 现在可以通过输入服务器ip:80看到Nginx的欢迎页面了"></a><strong>END. 现在可以通过输入服务器ip:80看到Nginx的欢迎页面了</strong></h2>]]></content>
    
    
    <categories>
      
      <category>Linux软件安装</category>
      
      <category>Nginx在CentOS的安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jvm学习</title>
    <link href="/2020/11/23/jvm%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/11/23/jvm%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>尚硅谷2020最新版宋红康JVM教程一些笔记，原链接: <a href="https://www.bilibili.com/video/BV1PJ411n7xZ?p=1">https://www.bilibili.com/video/BV1PJ411n7xZ?p=1</a> 。</p><a id="more"></a>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习-文件和用户管理</title>
    <link href="/2020/11/23/Linux%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E5%92%8C%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <url>/2020/11/23/Linux%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E5%92%8C%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong></p><p>Linux文件和用户系统学习，B站链接：<a href="https://www.bilibili.com/video/BV1pz4y1D73n?p=6">https://www.bilibili.com/video/BV1pz4y1D73n?p=6</a> 。</p><p>更详细可以参看：<a href="https://blog.csdn.net/liu17234050/article/details/108947343">https://blog.csdn.net/liu17234050/article/details/108947343</a> 。</p><hr><a id="more"></a><h2 id="Linux目录结构图"><a href="#Linux目录结构图" class="headerlink" title="Linux目录结构图"></a>Linux目录结构图</h2><p><img src="https://i.loli.net/2020/11/24/sTuxED79HRvN3L5.png" alt="linux目录结构"></p><h2 id="Linux系统的文件类型"><a href="#Linux系统的文件类型" class="headerlink" title="Linux系统的文件类型"></a>Linux系统的文件类型</h2><p>​    Linux 中一切皆为文件，文件类型也有多种，使用 <strong>ls -l</strong>（简写为<strong>ll</strong>） 命令可以查看文件的属性，所显示结果的第一列的第一个字符用来表明该文件的文件类型，如下：</p><p><img src="https://i.loli.net/2020/11/25/Nxb921cHLXaGQzy.png" alt="image-20201125132216443"></p><p><strong>常见文件类型</strong></p><p>使用 ls -l 命令后，第一列第一个字符为 “-“ 的文件为普通文件，如上图所示，普通文件一般为灰色字体，绿色字体的是可执行文件，红色字体的是压缩文件。第一个字符为 “d” 的文件为文件夹。</p><p><strong>非常见类型</strong></p><p>b 设备文件（块设备）储存设备，硬盘，/dev/sda，/dev/sda1</p><p>c 设备文件（字符设备）打印机，终端，/dev/tty1</p><p>i 链接文件（淡蓝色）</p><p>s 套接字文件</p><p>p 管道文件</p><h3 id="文件的权限："><a href="#文件的权限：" class="headerlink" title="文件的权限："></a>文件的权限：</h3><p>　　以普通文件为例，使用 ls -l 命令，可以看到第一个字符 “-“ ，表示这个文件为普通文件，它也可以是其他的字符，不同的字符代表不同类型的文件。其后的一串字符表明了该文件的权限，其中：</p><p>1）r 表明该文件具有可读权限，若该位置为 “-“ ，则表明文件不可读；</p><p>2）w 表明该文件具有写权限，若该位置为 “-“ ，则表明文件不可写；</p><p>3）x 表明该文件具有可执行权限，若该位置为 “-“ ，则表明文件不具有可执行权限；</p><p>4）第一个 rwx 表示该文件的所有者对该文件的权限；第二个 rwx 表示该文件所属组对该文件的权限；第三个 rwx 表示其他用户对该文件的权限。</p><h2 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h2><ol><li><p><strong>切换目录 cd</strong></p><p><strong>cd</strong>    绝对路径或相对路径</p><p>cd    绝对路径    cd /home/aaa</p><p>cd    相对路径    cd ..</p></li><li><p><strong>列出目录内容 ls</strong> </p><p><strong>ls</strong>    路径名 </p><p>ls    /home</p><p><strong>pwd</strong>    显示当前路径</p></li><li><p><strong>创建文件 touch</strong></p><p><strong>touch</strong>    文件路径/文件名称</p><p>touch    /home/aaa/a.txt    //创建a.txt</p></li><li><p><strong>创建目录 mkdir</strong></p><p><strong>mkdir</strong>    文件路径/文件名称</p><p>mkdir    ./bbb</p><p>mkdir    -p     ./aaa/bbb    //创建多层目录</p></li><li><p><strong>复制 cp</strong></p><p><strong>cp</strong>    原文件路径    目标文件夹</p><p>cp    aaa.txt    ./aaa/bbb</p><p>cp    -r    aaa    bbb    //递归复制，如果aaa文件夹里面还有文件夹，需要使用选项<code>-r</code>进行复制</p></li><li><p><strong>移动 mv</strong></p><p><strong>mv</strong>    原文件路径    目标文件夹</p><p>mv     ./aaa/bbb/aaa.txt    ./aaa</p></li><li><p><strong>删除 rm</strong></p><p><strong>rm</strong>    -rf    文件或目录的路径</p><p>rm    -rf    aaa/*</p></li><li><p><strong>查看文件内容 cat</strong></p><p>cat    查看文件全部内容，在终端打印</p><p>more    以显示一页的形式在终端打印内容，只能向后翻页文件</p><p>less    以显示一页的形式在终端打印内容，可以向前和向后翻页文件</p><p>head    从文件开头显示内容，增加选项<code>-n</code>可以指定显示的行数，<code>n</code>为数字，指显示的行数</p><p>tail    从文件末尾显示内容，增加选项<code>-n</code>可以指定显示的行数，<code>n</code>为数字，指显示的行数</p><p>grep    指定的查找模式搜索文件（对文件内容过滤），通知用户在什么文件中搜索到与指定的模式匹配的字            符串，并且打印出所有包含该字符串的文本行，该文本行的最前面是该行所在的文件名</p><p>​            grep    ‘abc’    /root/a.txt        //在a.txt中查找abc出现的地方</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
      <category>Linux文件系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test titleName</title>
    <link href="/2020/11/04/test-titleName/"/>
    <url>/2020/11/04/test-titleName/</url>
    
    <content type="html"><![CDATA[<p>​      </p><p>这是一个test内容</p><a id="more"></a>        <p>测试—</p><p>哈哈</br></p><p>abcdefg</p>]]></content>
    
    
    
    <tags>
      
      <tag>配置指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test Blog_hahaha</title>
    <link href="/2020/10/31/test-Blog-hahaha/"/>
    <url>/2020/10/31/test-Blog-hahaha/</url>
    
    <content type="html"><![CDATA[<p>​     </p><p>测试文章摘要</p><a id="more"></a><p><strong>七牛云 远程图片</strong></p><p><img src="http://qjko3ezpc.hn-bkt.clouddn.com/wallhaven-6k93rq_2560x1440.png" alt="wallhaven-6k93rq_2560x1440.png"></p><p>​      </p><p>​       </p><p><strong>sm.ms 远程图片</strong>    </p><p><img src="https://i.loli.net/2020/11/11/QwSjTJObZCEP3YK.png" alt="default.png"></p><p><strong>Typoa和PicGo app图片上传测试</strong></p><p><img src="https://i.loli.net/2020/11/11/LAbR3Gx8j2VTuFC.png" alt="山峰星空"></p><p>  ip:185.199.108.153</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fluid主题的使用指南</title>
    <link href="/2020/10/30/%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
    <url>/2020/10/30/%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>这是一款hexo博客的主题（fluid）的使用指南，原链接: <a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a> 。</p><a id="more"></a><h1 id="配置指南"><a href="#配置指南" class="headerlink" title="配置指南"></a>配置指南</h1><h2 id="关于指南"><a href="#关于指南" class="headerlink" title="关于指南"></a>关于指南</h2><pre><code class="hljs markdown">TIP致主题的新用户：<span class="hljs-bullet">*</span> 本指南经过数个版本打磨，绝大部分的功能都有详细说明，请仔细阅读，节约自己和他人的时间；<span class="hljs-bullet">*</span> 本指南中提到的：&quot;博客配置&quot; 指的 Hexo 博客目录下的 <span class="hljs-emphasis">_config.yml，&quot;主题配置&quot; 指的是 theme/fluid/_</span>config.yml 或者 <span class="hljs-emphasis">_config.fluid.yml ，注意区分；</span><span class="hljs-emphasis"></span><span class="hljs-emphasis">* 博客与主题的 source 目录最终会合并，因此存放的文件优先选择博客的 source；</span><span class="hljs-emphasis"></span><span class="hljs-emphasis">* 每次无论 hexo g 或 hexo s，都最好先使用 hexo clean；</span><span class="hljs-emphasis"></span><span class="hljs-emphasis">* 页面结果以本地 hexo s 为准，部署后的异常大部分是缓存原因，在确认没有报错的情况下，等待若干时间后即可正常；</span><span class="hljs-emphasis"></span><span class="hljs-emphasis">* 由于主题的不同版本会存在配置差异，本指南以最新版本为准。</span></code></pre><p>本指南不包括所有的配置说明，几乎每个配置在<strong>主题配置</strong>中都有注释，可配合指南共同参考使用。</p><p>另外本指南仅包含主题范围内的使用说明，如果是 Hexo 的使用或者 Hexo 插件的使用，请查阅各自的文档。</p><p>若存在其他主题相关的疑问请在 <a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/new">issues</a> 留言。</p><h2 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h2><h3 id="覆盖配置"><a href="#覆盖配置" class="headerlink" title="覆盖配置"></a>覆盖配置</h3><pre><code class="hljs markdown">TIP覆盖配置可以使<span class="hljs-strong">**主题配置**</span>放置在 fluid 目录之外，避免在更新主题时丢失自定义的配置。通过 Npm 安装主题的用户可忽略，其他用户建议学习使用。</code></pre><p>Hexo 5.0.0 版本以上的用户，在博客目录下创建 <code>_config.fluid.yml</code> 文件，将主题的<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/release/_config.yml">_config.yml</a>内容复制过去。</p><p>以后如果修改任何主题配置，都只需修改 <code>_config.fluid.yml</code> 的配置即可。</p><p>注意：</p><ul><li><p>只要存在于 _config.fluid.yml 的配置都是高优先级，修改原 _config.yml 是无效的 。     </p></li><li><p>每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对 _config.fluid.yml 同步修改。</p></li><li><p>想查看覆盖配置有没有生效，可以通过 hexo g –debug 查看命令行输出。</p></li><li><p>如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的，比如：</p></li></ul><pre><code class="hljs yaml"><span class="hljs-attr">about:</span>  <span class="hljs-attr">icons:</span>  <span class="hljs-comment"># 不要把 icon 注释掉，否则无法覆盖配置</span>    <span class="hljs-comment"># - &#123; class: &#x27;iconfont icon-github-fill&#x27;, link: &#x27;https://github.com&#x27; &#125;</span>    <span class="hljs-comment"># - &#123; class: &#x27;iconfont icon-wechat-fill&#x27;, qrcode: &#x27;/img/favicon.png&#x27; &#125;</span></code></pre><p>Hexo 低于 5.0.0 版本看这里</p><pre><code class="hljs md">必须确保 Hexo 版本不低于 3.0.0，使用方式：<span class="hljs-bullet">    1.</span> 进入博客目录的 source 目录下（不是主题目录的 source），创建 <span class="hljs-emphasis">_data 目录（和 _</span>post 目录同级）；<span class="hljs-bullet">    2.</span> 在 <span class="hljs-emphasis">_data 目录下创建 fluid_</span>config.yml 文件，将 /theme/fluid/<span class="hljs-emphasis">_config.yml 中全部配置（或部分配置）复制到 fluid_</span>config.yml 中；<span class="hljs-bullet">    3.</span> 以后配置都在 fluid<span class="hljs-emphasis">_config.yml 中修改，配置会在 hexo g 时自动覆盖。</span></code></pre><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>所有静态资源文件的 Url 可以通过主题配置中的 <code>static_prefix</code> 配置项修改。</p><p>比如需要指定公共 CDN 的 JQuery 库，只需将原配置改为：</p><pre><code class="hljs yaml"><span class="hljs-attr">jquery:</span> <span class="hljs-string">https://cdn.staticfile.org/jquery/3.4.1/</span></code></pre><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><ul><li><p>已集成 hexo-generator-search 插件，若已安装其他搜索插件请关闭，以避免生成多余的索引文件。</p></li><li><p>默认在根目录生成并使用 <code>local-search.xml</code>。</p></li></ul><h3 id="页面顶部大图"><a href="#页面顶部大图" class="headerlink" title="页面顶部大图"></a>页面顶部大图</h3><ul><li>图片来源</li></ul><p>主题配置中，每个页面都有名为 <code>banner_img</code>的属性，可以使用本地图片的相对路径，也可以为外站链接，比如：</p><p>指向本地图片：</p><pre><code class="hljs yaml"><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/example.jpg</span>   <span class="hljs-comment"># 对应存放在 /source/img/bg/example.jpg</span></code></pre><p>指向外站链接：</p><pre><code class="hljs yaml"><span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://static.zkqiang.cn/example.jpg</span></code></pre><pre><code class="hljs markdown">TIP<span class="hljs-bullet">*</span> 如果是本地图片，目录文件夹可自定义，但必须在 source 目录下，博客与主题的 source 目录最终会合并，因此优先选择博客的 source。<span class="hljs-bullet">*</span> 图片大小建议压缩到 1MB 以内，否则会严重拖慢页面加载。</code></pre><ul><li>高度</li></ul><p>鉴于每个人的喜好不同，开放对页面 <code>banner_img</code>高度的控制。</p><p><strong>主题配置</strong>中，每个页面对应的 <code>banner_img_height</code> 属性，有效值为 0 - 100。100 即为全屏，个人建议 70 以上。</p><ul><li>蒙版透明度</li></ul><p><strong>主题配置</strong>中，每个页面对应的 <code>banner_mask_alpha</code> 属性，有效值为 0 - 1.0， 0 是完全透明（无蒙版），1 是完全不透明</p><pre><code class="hljs markdown">TIP每篇文章可单独设置 Banner，具体见文章页设置本主题不支持固定背景（fixed），原因：与目前代码结构有较大冲突，需要大量修改<span class="hljs-code">`fixed`</span>在移动端兼容性很差</code></pre><h3 id="博客标题"><a href="#博客标题" class="headerlink" title="博客标题"></a>博客标题</h3><p>页面左上角的博客标题，默认使用博客配置中的 <code>title</code>，这个配置同时控制着网页在浏览器标签中的标题。</p><p>如需单独区别设置，可在<strong>主题配置</strong>中设置：</p><pre><code class="hljs css"><span class="hljs-selector-tag">navbar</span>:  <span class="hljs-selector-tag">blog_title</span>: 博客标题</code></pre><h3 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h3><pre><code class="hljs css"><span class="hljs-selector-tag">navbar</span>:  <span class="hljs-selector-tag">menu</span>:   <span class="hljs-selector-tag">-</span> &#123; <span class="hljs-attribute">key</span>: <span class="hljs-string">&#x27;home&#x27;</span>, link: <span class="hljs-string">&#x27;/&#x27;</span>, icon: <span class="hljs-string">&#x27;iconfont icon-home-fill&#x27;</span> &#125;   <span class="hljs-selector-tag">-</span> &#123; <span class="hljs-attribute">key</span>: <span class="hljs-string">&#x27;tag&#x27;</span>, link: <span class="hljs-string">&#x27;/tags/&#x27;</span>, icon: <span class="hljs-string">&#x27;iconfont icon-tags-fill&#x27;</span> &#125;   <span class="hljs-selector-tag">-</span> &#123; <span class="hljs-attribute">key</span>: <span class="hljs-string">&#x27;about&#x27;</span>, link: <span class="hljs-string">&#x27;/about/&#x27;</span>, icon: <span class="hljs-string">&#x27;iconfont icon-user-fill&#x27;</span>, name: <span class="hljs-string">&#x27;联系我&#x27;</span> &#125;</code></pre><ul><li><p><code>key</code>: 用于关联有多语言，如不存在关联则显示 key 本身的值</p></li><li><p><code>link</code>: 跳转链接</p></li><li><p><code>icon</code>: 图标的 css class，可以省略（即没有图标），主题内置图标详见<a href="https://hexo.fluid-dev.com/docs/icon/#%E5%86%85%E7%BD%AE%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87">这里</a></p></li><li><p><code>name</code>: 强制使用此名称显示（不再按多语言显示），可省略</p></li></ul><p>另外支持二级菜单（下拉菜单），配置写法如下：</p><pre><code class="hljs css"><span class="hljs-selector-tag">menu</span>:&#123;<span class="hljs-attribute">key</span>: <span class="hljs-string">&#x27;文档&#x27;</span>,icon: <span class="hljs-string">&#x27;iconfont icon-books&#x27;</span>,submenu: [  &#123; key: <span class="hljs-string">&#x27;主题博客&#x27;</span>, link: <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/&#x27;</span> &#125;,  &#123; <span class="hljs-attribute">key</span>: <span class="hljs-string">&#x27;配置指南&#x27;</span>, link: <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/guide/&#x27;</span> &#125;,  &#123; <span class="hljs-attribute">key</span>: <span class="hljs-string">&#x27;图标用法&#x27;</span>, link: <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/icon/&#x27;</span> &#125;]  &#125;</code></pre><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><pre><code class="hljs css"><span class="hljs-selector-tag">lazyload</span>:  <span class="hljs-selector-tag">enable</span>: <span class="hljs-selector-tag">true</span>  <span class="hljs-selector-tag">onlypost</span>: <span class="hljs-selector-tag">false</span></code></pre><p>开启后，当图片滚动到可见范围内才会加载，可以大幅提高网页整体加载速度。</p><p><code>onlypost</code> 为 true 时，仅在文章页才使用懒加载。自定义页面在 Front-matter 中指定 <code>lazyload: true</code> 可单独开启（仅对 md 文档部分有效）。</p><h3 id="全局字体"><a href="#全局字体" class="headerlink" title="全局字体"></a>全局字体</h3><p>所有页面统一字体的字号和字族可以通过主题配置中的下列配置项设置：</p><pre><code class="hljs css"><span class="hljs-selector-tag">font</span>:  # 主题字体配置  <span class="hljs-selector-tag">font_size</span>: 16<span class="hljs-selector-tag">px</span>        # 全局字号  <span class="hljs-selector-tag">font_family</span>:           # 全局字体族  <span class="hljs-selector-tag">code_font_size</span>: 85%    # 代码的字号</code></pre><p>关于字体族（<code>font-family</code>）如果不了解可以看<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family">这篇文章</a>先了解一下。</p><p>需要注意：</p><ul><li><p>最好使用系统自带的字体，否则需要通过自定义功能额外引入 <code>@font-face</code>，字体一般较大，不建议引入；</p></li><li><p>应当至少添加一个通用的字体族名（如 serif，具体见上方链接文章）。</p></li></ul><p>如果想设置单独的页面，可以直接在 markdown 里通过 style 标签实现：</p><pre><code class="hljs html">---title: example---<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">  <span class="hljs-comment">/* 设置整个页面的字体 */</span></span><span class="css">  <span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span>, <span class="hljs-selector-class">.markdown-body</span> &#123;</span>    font-family: KaiTi,&quot;Microsoft YaHei&quot;,Georgia, sans, serif;    font-size: 15px;  &#125;<span class="css">  <span class="hljs-comment">/* 只设置 markdown 字体 */</span></span><span class="css">  <span class="hljs-selector-class">.markdown-body</span> &#123;</span>    font-family: KaiTi,&quot;Microsoft YaHei&quot;,Georgia, sans, serif;    font-size: 15px;  &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><h3 id="网页统计"><a href="#网页统计" class="headerlink" title="网页统计"></a>网页统计</h3><p>目前支持多种统计网站，开启后按需填入 Key 或 ID 即可。</p><pre><code class="hljs yaml"><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 默认为false，启用网页统计改为true即可</span>  <span class="hljs-attr">baidu:</span>  <span class="hljs-comment"># 百度统计的Key，参见 https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376 代码获取中 hm.js? 后边的字符串</span>  <span class="hljs-attr">google:</span>  <span class="hljs-comment"># Google统计的Tracking ID，参见 https://analytics.google.com/analytics/web/</span>  <span class="hljs-attr">tencent:</span>  <span class="hljs-comment"># 腾讯统计的H5 App id，参见 https://mta.qq.com/h5/manage/ctr_app_manage (开启高级功能才有cid)</span>    <span class="hljs-attr">sid:</span>    <span class="hljs-attr">cid:</span>  <span class="hljs-attr">woyaola:</span>  <span class="hljs-comment"># 51.la站点统计ID，参见 https://www.51.la/user/site/index</span>  <span class="hljs-attr">cnzz:</span>  <span class="hljs-comment"># 友盟/cnzz站点统计web_id，参见 https://web.umeng.com/main.php?c=site&amp;a=show</span>  <span class="hljs-attr">leancloud:</span>  <span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 web_analytics.enable 没有开启，PV UV 展示只会查询，不会增加</span>    <span class="hljs-attr">app_id:</span>    <span class="hljs-attr">app_key:</span>    <span class="hljs-attr">server_url:</span>  <span class="hljs-comment"># REST API 服务器地址，国际版不填</span></code></pre><h3 id="展示-PV-与-UV-统计"><a href="#展示-PV-与-UV-统计" class="headerlink" title="展示 PV 与 UV 统计"></a>展示 PV 与 UV 统计</h3><p>页脚可以展示 PV 与 UV 统计数据，目前支持两种数据来源：<a href="https://www.leancloud.cn/">LeanCloud</a><br> 与 <a href="http://busuanzi.ibruce.info/">不蒜子</a>。</p><p>相关主题配置如下：</p><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span>  <span class="hljs-attr">statistics:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>  <span class="hljs-comment"># 可选 leancloud | busuanzi  根据自己需求选择</span>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span></code></pre><pre><code class="hljs md">TIP不蒜子不需要申请账号，直接开启即可，但有时候会响应缓慢拖慢整个页面加载。不蒜子在 localhost 域名下显示的不是真正的数据，因此无需在意。LeanCloud 使用前需要申请账号（国内需要身份认证），然后在 web<span class="hljs-emphasis">_analytics 配置项中将 leancloud API 相关参数填上才能生效。</span><span class="hljs-emphasis"></span><span class="hljs-emphasis">LeanCloud 在 localhost 域名下不会增加数据。</span><span class="hljs-emphasis"></span><span class="hljs-emphasis">如果参数填写错误或者接口异常，不会显示数据，请在浏览器控制台排查具体原因。</span></code></pre><h3 id="多语言"><a href="#多语言" class="headerlink" title="多语言"></a>多语言</h3><p>不同语言会影响一些主题自带的文字。</p><p>设置语言是在<strong>博客配置</strong>中，需要对应 <code>fluid/languages/</code> 目录内的配置文件名:</p><pre><code class="hljs yaml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span></code></pre><p>默认提供英文(en)、简体中文(zh-CN)、日文(ja)。</p><p>如果想自定义，建议单独复制一份新文件进行修改，然后指定该文件名。</p><h3 id="强制全局-HTTPS"><a href="#强制全局-HTTPS" class="headerlink" title="强制全局 HTTPS"></a>强制全局 HTTPS</h3><p>当你的域名升级到 HTTPS 后，可能之前存在部分图片等资源使用的是 HTTP，这时混用出现网页报错，造成图片无法显示。</p><p>控制台里也会出现报错：<code>Mixed Content: The page at &#39;https://xxx&#39; was loaded over HTTPS</code>。</p><p>这种情况可以在主题配置中开启此配置：</p><pre><code class="hljs yaml"><span class="hljs-attr">force_https:</span> <span class="hljs-literal">true</span></code></pre><p>即可将所有请求强制升级为 HTTPS（如是外部资源，需要本身支持 HTTPS）。</p><h3 id="二级站点路径"><a href="#二级站点路径" class="headerlink" title="二级站点路径"></a>二级站点路径</h3><p>如果你的博客部署在二级路径（如: xxx.com/blog/），需要修改博客配置中：</p><pre><code class="hljs yaml"><span class="hljs-attr">url:</span> <span class="hljs-string">http://xxx.com/blog</span><span class="hljs-attr">root:</span> <span class="hljs-string">/blog/</span></code></pre><h3 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h3><p>如果想单独生成一个页面，步骤和创建「关于页」类似。</p><ol><li>首先用命令行创建页面：</li></ol><pre><code class="hljs sh">$ hexo new page example</code></pre><ol start="2"><li>创建成功后编辑博客目录下 /source/example/index.md：</li></ol><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">example</span><span class="hljs-attr">subtitle:</span> <span class="hljs-string">若不填默认是</span> <span class="hljs-string">title</span><span class="hljs-meta">---</span><span class="hljs-string">这里写正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span></code></pre><p>正文默认没有 Markdown 样式，如果希望和文章相同的样式，可以加上：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;markdown-body&quot;</span>&gt;</span>正文<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><ol start="3"><li>页面的属性配置可以在<strong>主题配置</strong>中统一设置：</li></ol><pre><code class="hljs yaml"><span class="hljs-attr">page:</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span></code></pre><p>也可以直接在 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a>里单独设置：</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">example</span><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.5</span><span class="hljs-meta">---</span><span class="hljs-comment"># 这里可以写正文</span></code></pre><h3 id="自定义-JS-CSS-HTML"><a href="#自定义-JS-CSS-HTML" class="headerlink" title="自定义 JS / CSS / HTML"></a>自定义 JS / CSS / HTML</h3><p>如果你想引入外部的 JS、CSS（比如 IconFont）或 HTML，可以通过以下<strong>主题配置</strong>，具体见注释：</p><pre><code class="hljs yaml"><span class="hljs-comment"># 指定自定义 js 文件路径，路径是相对 source 目录</span><span class="hljs-attr">custom_js:</span> <span class="hljs-string">/js/custom.js</span><span class="hljs-comment"># 指定自定义 css 文件路径，路径是相对 source 目录</span><span class="hljs-attr">custom_css:</span> <span class="hljs-string">/css/custom.css</span><span class="hljs-comment"># 自定义底部 HTML 内容（位于 footer 上方），也可用于外部引入 js css 这些操作，注意不要和 post.custom 配置冲突</span><span class="hljs-attr">custom_html:</span> <span class="hljs-string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;//at.alicdn.com/t/font_1067060_qzomjdt8bmp.css&quot;&gt;&#x27;</span></code></pre><p>另外 <code>custom_js</code> 和 <code>custom_css</code> 都可以指定多个路径：</p><pre><code class="hljs yaml"><span class="hljs-attr">custom_css:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/custom.css</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">//at.alicdn.com/t/font_1736178_ijqayz9ro8k.css</span></code></pre><h3 id="暗色模式"><a href="#暗色模式" class="headerlink" title="暗色模式"></a>暗色模式</h3><p>主题暗色模式，开启后菜单中会出现切换按钮</p><pre><code class="hljs yaml"><span class="hljs-attr">dark_mode:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">default:</span> <span class="hljs-string">auto</span></code></pre><p><code>default</code> 是暗色默认的模式，可选参数：auto / light / dark</p><p>选择 auto 时优先遵循 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme">prefers-color-scheme</a>，如果不支持则按用户本地时间 18 点到次日 6 点之间进入暗色模式。</p><p>无论选择任何模式，当用户手动切换后会在用户本地保存选项，该用户不再按照默认模式。</p><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><h3 id="Slogan-打字机"><a href="#Slogan-打字机" class="headerlink" title="Slogan(打字机)"></a>Slogan(打字机)</h3><p>首页大图中的打字机文字，可在主题配置中设定是否开启：</p><pre><code class="hljs yaml"><span class="hljs-attr">index:</span>  <span class="hljs-attr">slogan:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">text:</span> <span class="hljs-string">这是一条</span> <span class="hljs-string">Slogan</span></code></pre><p>如果 <code>text</code> 为空则按博客配置的 <code>subtitle</code> 显示。</p><p>相关的打字机动效设置在：</p><pre><code class="hljs yaml"><span class="hljs-attr">fun_features:</span>  <span class="hljs-attr">typing:</span> <span class="hljs-comment"># 为 subtitle 添加打字机效果</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">70</span> <span class="hljs-comment"># 打印速度</span>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span> <span class="hljs-comment"># 游标字符</span>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否循环播放效果</span></code></pre><h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><p>开关自动摘要（默认开启）：</p><pre><code class="hljs yaml"><span class="hljs-attr">index:</span>  <span class="hljs-attr">auto_excerpt:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span></code></pre><p>若要手动指定摘要，使用 <code>&lt;!-- more --&gt;</code> MD文档里划分，如：</p><pre><code class="hljs markdown">这里是摘要<span class="xml"><span class="hljs-comment">&lt;!-- more --&gt;</span></span>这里是正文</code></pre><p>或者在 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a>里设置 <code>excerpt</code> 字段，如：</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">这是标题</span><span class="hljs-attr">excerpt:</span> <span class="hljs-string">这是摘要</span><span class="hljs-meta">---</span></code></pre><pre><code class="hljs angelscript">TIP优先级: 手动摘要 &gt; 自动摘要如果关闭自动摘要，并且没有设置手动摘要，摘要区域空白无论哪种摘要都最多显示 <span class="hljs-number">3</span> 行，当屏幕宽度不足时会隐藏部分摘要。</code></pre><h3 id="文章跳转方式"><a href="#文章跳转方式" class="headerlink" title="文章跳转方式"></a>文章跳转方式</h3><pre><code class="hljs yaml"><span class="hljs-attr">index:</span>  <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_self</span></code></pre><p>可选值：</p><ol><li><p>_blank：新标签页打开</p></li><li><p>_self：当前标签页打开</p></li></ol><h3 id="文章信息"><a href="#文章信息" class="headerlink" title="文章信息"></a>文章信息</h3><p>可配置隐藏包括发布时间、分类、标签。</p><p>经过测试，如果首页的文章列表中没有略缩图和摘要，标题+文章信息的显示方式会使页面过于拥挤，所以给出此项配置供喜欢首页只显示文章标题的同学使用。</p><pre><code class="hljs yaml"><span class="hljs-attr">index:</span>  <span class="hljs-attr">post_meta:</span>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">category:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">true</span></code></pre><h3 id="隐藏文章"><a href="#隐藏文章" class="headerlink" title="隐藏文章"></a>隐藏文章</h3><p>如果想把某些文章隐藏起来，不在首页和其他分类里展示，可以在文章开头 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a>中配置 <code>hide: true</code> 属性。</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span><span class="hljs-meta">---</span><span class="hljs-string">以下是文章内容</span></code></pre><pre><code class="hljs">TIP隐藏会使文章在分类和标签类里都不显示隐藏后依然可以通过文章链接访问</code></pre><h3 id="文章排序"><a href="#文章排序" class="headerlink" title="文章排序"></a>文章排序</h3><p>如果想手动将某些文章固定在首页靠前的位置，可以在安装 <code>hexo-generator-index</code> &gt;= 2.0.0 版本的情况下，在文章开头 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a> 中配置 sticky 属性：</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><span class="hljs-attr">sticky:</span> <span class="hljs-number">100</span><span class="hljs-meta">---</span><span class="hljs-string">以下是文章内容</span></code></pre><p><code>sticky</code> 数值越大，该文章越靠前，达到类似于置顶的效果，其他未设置的文章依然按默认排序。</p><p>当文章设置了<code>sticky</code> 后，主题会默认在首页文章标题前增加一个图标，来标识这是一个置顶文章，你可以通过<strong>主题配置</strong>去关闭或修改这个功能：</p><pre><code class="hljs yaml"><span class="hljs-attr">index:</span>  <span class="hljs-attr">post_sticky:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-top&#x27;</span></code></pre><p><code>icon</code> 可以通过<a href="https://hexo.fluid-dev.com/docs/icon/">自定义图标</a>修改为其他图标。</p><h2 id="文章页"><a href="#文章页" class="headerlink" title="文章页"></a>文章页</h2><h3 id="文章在首页的略缩图"><a href="#文章在首页的略缩图" class="headerlink" title="文章在首页的略缩图"></a>文章在首页的略缩图</h3><p>在文章开头 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a> 中配置 <code>index_img</code> 属性。</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><span class="hljs-meta">---</span><span class="hljs-string">以下是文章内容</span></code></pre><p>和 Banner 配置相同，<code>img/example.jpg</code> 对应的是存放在<code>/source/img/example.jpg</code> 目录下的图片（目录也可自定义，但必须在 source 目录下）。</p><p>也可以使用外链 Url 的绝对路径。</p><h3 id="文章页顶部大图"><a href="#文章页顶部大图" class="headerlink" title="文章页顶部大图"></a>文章页顶部大图</h3><p>默认显示<strong>主题配置</strong>中的 <code>post.banner_img</code>，如需要设置单个文章的 Banner，在 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a> 中指定 banner_img 属性。</p><p>本地图片存放位置同上。</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/post_banner.jpg</span><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><span class="hljs-meta">---</span><span class="hljs-string">以下是文章内容</span></code></pre><h3 id="文章内容图片"><a href="#文章内容图片" class="headerlink" title="文章内容图片"></a>文章内容图片</h3><p>本地图片存放位置同上。</p><pre><code class="hljs md">![](/img/example.jpg)</code></pre><h3 id="日期-字数-阅读时长-阅读数"><a href="#日期-字数-阅读时长-阅读数" class="headerlink" title="日期/字数/阅读时长/阅读数"></a>日期/字数/阅读时长/阅读数</h3><p>显示在文章页大标题下的文章信息，除了作者和阅读次数，其他功能都是默认开启的。</p><pre><code class="hljs yaml"><span class="hljs-attr">post:</span>  <span class="hljs-attr">meta:</span>    <span class="hljs-attr">author:</span>  <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">date:</span>  <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;dddd, MMMM Do YYYY, h:mm a&quot;</span>  <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span>    <span class="hljs-attr">wordcount:</span>  <span class="hljs-comment"># 字数统计</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span>    <span class="hljs-attr">min2read:</span>  <span class="hljs-comment"># 阅读时间</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span>    <span class="hljs-attr">views:</span>  <span class="hljs-comment"># 阅读次数</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-comment"># 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span></code></pre><pre><code class="hljs md">TIP日期格式必须遵循 ISO-8601 规范，否则无法正常显示；其他格式必须包括 &#123;&#125; 符号代替数字，文字可自由设置。</code></pre><h3 id="代码高亮样式"><a href="#代码高亮样式" class="headerlink" title="代码高亮样式"></a>代码高亮样式</h3><p>高亮样式从这里挑选：<a href="https://highlightjs.org/static/demo/">https://highlightjs.org/static/demo/</a></p><p>然后将 style 的名称填入<strong>主题配置</strong>：</p><pre><code class="hljs yaml"><span class="hljs-attr">highlight:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">style:</span> <span class="hljs-string">&#x27;Github Gist&#x27;</span>  <span class="hljs-attr">bg_color:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span></code></pre><p><code>bg_color</code>: 是否根据 style 改变代码背景色，如果 style 是白色背景最好关闭此项</p><p><code>copy_btn</code>: 是否开启复制代码的按钮</p><p>高亮暂不支持行号。</p><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>开启评论需要在<strong>主题配置</strong>中开启并指定评论模块：</p><pre><code class="hljs yaml"><span class="hljs-attr">post:</span>  <span class="hljs-attr">comments:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span></code></pre><p>然后在下方还要设置对应评论模块的参数，比如 disqus 对应设置：</p><pre><code class="hljs yaml"><span class="hljs-attr">disqus:</span>  <span class="hljs-attr">shortname:</span> <span class="hljs-string">fluid</span></code></pre><p>当前支持 Valine、Disqus、Gitalk、Utterances、畅言、来必力(livere)、Remark42，使用和参数设置需要自行查询各自的文档（文档地址在配置注释里）。</p><p>若需要自定义添加其他评论系统，请自行在 <code>fluid/layout/_partial/comments/</code> 目录内创建 ejs 文件，参照自带的 ejs 填入评论服务商提供的代码，再修改 <code>post.comments.type</code> 为对应文件名。</p><pre><code class="hljs md">TIP国内用户推荐推荐使用 Valine 或者 Utterances如果设置后评论模块没有显示，说明配置没有完成，或者配置有误出现报错（请在浏览器控制台查看具体报错）</code></pre><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>主题内置了脚注语法支持，可以在文章末尾自动生成带有锚点的脚注，该功能在<strong>主题配置</strong>中默认开启：</p><pre><code class="hljs yaml"><span class="hljs-attr">post:</span>  <span class="hljs-attr">footnote:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&#x27;</span></code></pre><p>脚注语法如下：</p><pre><code class="hljs markdown">这是一句话[^1][<span class="hljs-symbol">^1</span>]: <span class="hljs-link">这是对应的脚注</span></code></pre><p>更优雅的使用方式，是将脚注写在文末，比如：</p><pre><code class="hljs markdown">正文<span class="hljs-section">## 参考</span>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">参考资料1</span>[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span></code></pre><p>当然你也可以通过修改上方配置项 <code>header</code> 来自动加入节标题，如下所示：</p><pre><code class="hljs yaml"><span class="hljs-attr">post:</span>  <span class="hljs-attr">footnote:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&lt;h2&gt;参考&lt;/h2&gt;&#x27;</span>  <span class="hljs-comment"># 等同于手动写 `## 参考`</span></code></pre><h3 id="Tag-插件"><a href="#Tag-插件" class="headerlink" title="Tag 插件"></a>Tag 插件</h3><pre><code class="hljs md">WARNING所有 Tag 仍在测试中，后续版本可能会修改</code></pre><h4 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h4><p>在 markdown 中加入如下的代码来使用便签：</p><pre><code class="hljs markdown">&#123;% note success %&#125;文字 或者 <span class="hljs-code">`markdown`</span> 均可&#123;% endnote %&#125;</code></pre><p>或者使用 HTML 形式：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><p>可选便签：</p><pre><code class="hljs md">primarysecondarysuccessdangerwarninginfolight</code></pre><pre><code class="hljs md">WARNING使用时 &#123;% note primary %&#125; 和 &#123;% endnote %&#125; 需单独一行，否则会出现问题</code></pre><h4 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h4><p>在 markdown 中加入如下的代码来使用 Label：</p><pre><code class="hljs markdown">&#123;% label primary @text %&#125;</code></pre><p>或者使用 HTML 形式：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></code></pre><p>可选 Label：</p><pre><code class="hljs pgsql"><span class="hljs-keyword">primary</span>, <span class="hljs-keyword">default</span>, <span class="hljs-keyword">info</span>, success, <span class="hljs-built_in">warning</span>, danger</code></pre><pre><code class="hljs pgsql"><span class="hljs-built_in">WARNING</span>若使用 &#123;% label <span class="hljs-keyword">primary</span> @<span class="hljs-type">text</span> %&#125;，<span class="hljs-type">text</span> 不能以 @ 开头</code></pre><p>#<br>勾选框</p><p>在 markdown 中加入如下的代码来使用 Checkbox：</p><pre><code class="hljs markdown">&#123;% cb text, checked?, incline? %&#125;</code></pre><p>text：显示的文字<br>checked：默认是否已勾选，默认 false<br>incline: 是否内联（可以理解为后面的文字是否换行），默认 false</p><p>示例：</p><pre><code class="hljs crystal"><span class="hljs-template-variable">&#123;% cb 普通示例 %&#125;</span><span class="hljs-template-variable">&#123;% cb 默认选中, <span class="hljs-literal">true</span> %&#125;</span><span class="hljs-template-variable">&#123;% cb 内联示例, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span> %&#125;</span> 后面文字不换行<span class="hljs-template-variable">&#123;% cb <span class="hljs-literal">false</span> %&#125;</span> 也可以只传入一个参数，文字写在后边（这样不支持外联）</code></pre><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><p>你可以在 markdown 中加入如下的代码来使用 Button：</p><pre><code class="hljs markdown">&#123;% btn url, text, title %&#125;</code></pre><p>或者使用 HTML 形式：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><p>url：跳转链接<br>text：显示的文字<br>title：鼠标悬停时显示的文字（可选）</p><h4 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h4><p>如果想把多张图片按一定布局组合显示，你可以在 markdown 中按如下格式：</p><pre><code class="hljs markdown">&#123;% gi total n1-n2-... %&#125;  ![](url)  ![](url)  ![](url)  ![](url)  ![](url)&#123;% endgi %&#125;</code></pre><p>total：图片总数量，对应中间包含的图片 url 数量<br>n1-n2-…：每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式</p><h3 id="LaTeX-数学公式"><a href="#LaTeX-数学公式" class="headerlink" title="LaTeX 数学公式"></a>LaTeX 数学公式</h3><pre><code class="hljs text">Hexo 5.0 以上，可尝试 Hexo 官方的 [hexo-math](https://github.com/hexojs/hexo-math) 插件，支持更多定制化参数，使用方式参照仓库内的文档，以下介绍的是主题内置的 LaTeX 功能。</code></pre><p>当需要使用 <a href="https://www.latex-project.org/help/documentation/">LaTeX</a> 语法的数学公式时，可手动开启本功能，需要完成三步操作：</p><ol><li><strong>设置主题配置</strong></li></ol><pre><code class="hljs yaml"><span class="hljs-attr">post:</span>  <span class="hljs-attr">math:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span></code></pre><p><code>specific</code>: 建议开启。当为 true 时，只有在文章 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a>里指定 <code>math: true</code> 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度。</p><p><code>engine</code>: 公式渲染引擎，目前支持 <code>mathjax</code> 或 <code>katex</code>。</p><ol start="2"><li><strong>更换 Markdown 渲染器</strong></li></ol><p>由于 Hexo 默认的 Markdown 渲染器不支持复杂公式，所以必须更换渲染器。</p><p>先卸载原有渲染器：</p><p><code>npm uninstall hexo-renderer-marked --save</code></p><p>然后根据上方配置不同的 engine，推荐更换如下渲染器：</p><p>mathjax: <code>npm install hexo-renderer-kramed --save</code></p><p>katex: <code>npm install @upupming/hexo-renderer-markdown-it-plus --save</code></p><ol start="3"><li><strong>安装完成后执行</strong> <code>hexo clean</code></li></ol><pre><code class="hljs md">WARNING不可同时安装多个渲染器，如果更换公式引擎，对应渲染器也要一并更换。如果公式没有被正确渲染，请仔细检查是否符合上面三步操作。另外不同的渲染器，可能会导致一些 Markdown 语法不支持。自定义页面默认不加载渲染，如需使用，需在 Front-matter 中指定 math: true</code></pre><pre><code class="hljs md">TIP不同的公式引擎有不同的优缺点。MathJax优点对 LaTeX 语法支持全面右键点击公式有扩展功能缺点需要加载 JS，页面加载会比较慢，并且有渲染变化kramed 渲染器对内联公式的转义字符 \ 支持不足KaTeX优点没有 JS 不会影响页面加载渲染器效果好 (相对 kramed 对 MathJax 的内联公式)缺点小部分 LaTeX 不支持</code></pre><h3 id="Mermaid-流程图"><a href="#Mermaid-流程图" class="headerlink" title="Mermaid 流程图"></a>Mermaid 流程图</h3><p>当需要使用 <a href="http://mermaid-js.github.io/mermaid/#/">Mermaid</a>渲染流程图时，可手动开启本功能：</p><pre><code class="hljs yaml"><span class="hljs-attr">post:</span>  <span class="hljs-attr">mermaid:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">options:</span></code></pre><p><code>specific</code>: 建议开启。当为 true 时，只有在文章 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a>里指定 <code>mermaid: true</code> 才会在文章页启动流程图渲染，以便在页面不包含流程图时提高加载速度。</p><p><code>options</code>: 官方 API 的配置项，具体可见 <a href="http://mermaid-js.github.io/mermaid/#/mermaidAPI">mermaidAPI.js</a></p><pre><code class="hljs md">TIP自定义页面默认不加载，如需使用，需在 Front-matter 中指定 mermaid: true</code></pre><h2 id="归档页"><a href="#归档页" class="headerlink" title="归档页"></a>归档页</h2><p>具体见配置文件注释</p><h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><p>具体见配置文件注释</p><p><a href="https://hexo.io/zh-cn/docs/front-matter">添加分类的方法</a></p><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p>标签是以词云的形式展示，标签的大小和颜色会根据标签下的文章数量变化，相关配置如下：</p><pre><code class="hljs yaml"><span class="hljs-attr">tag:</span>  <span class="hljs-attr">tagcloud:</span>    <span class="hljs-attr">min_font:</span> <span class="hljs-number">15</span>    <span class="hljs-attr">max_font:</span> <span class="hljs-number">30</span>    <span class="hljs-attr">unit:</span> <span class="hljs-string">px</span>  <span class="hljs-comment"># 字号单位</span>    <span class="hljs-attr">start_color:</span> <span class="hljs-string">&quot;#BBBBEE&quot;</span>    <span class="hljs-attr">end_color:</span> <span class="hljs-string">&quot;#337ab7&quot;</span></code></pre><p>其他配置具体见配置文件注释</p><p><a href="https://hexo.io/zh-cn/docs/front-matter">添加标签的方法</a></p><h2 id="关于页"><a href="#关于页" class="headerlink" title="关于页"></a>关于页</h2><h3 id="创建关于页"><a href="#创建关于页" class="headerlink" title="创建关于页"></a>创建关于页</h3><p>首次使用主题的「关于页」需要手动创建：</p><pre><code class="hljs bash">$ hexo new page about</code></pre><p>创建成功后修改 <code>source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020-02-23 19:20:33</span><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><span class="hljs-meta">---</span><span class="hljs-comment"># 这里可以写正文</span><span class="hljs-string">支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span></code></pre><h3 id="社交页图标"><a href="#社交页图标" class="headerlink" title="社交页图标"></a>社交页图标</h3><p>在<strong>主题配置</strong>中设置：</p><pre><code class="hljs yaml"><span class="hljs-attr">about:</span>  <span class="hljs-attr">icons:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-github-fill&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://github.com&#x27;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&#x27;GitHub&#x27;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-douban-fill&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://github.com&#x27;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&#x27;豆瓣&#x27;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-wechat-fill&#x27;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&#x27;/img/favicon.png&#x27;</span> &#125;</code></pre><ul><li><p><code>class</code>: 图标的 css class，主题内置图标详见<a href="https://hexo.fluid-dev.com/docs/icon/">这里</a></p></li><li><p><code>link</code>: 跳转链接</p></li><li><p><code>tip</code>: 鼠标悬浮在图标上显示的提示文字</p></li><li><p><code>qrcode</code>: 二维码图片，当使用此字段后，点击不再跳转，而是悬浮二维码</p></li></ul><h2 id="友情链接页"><a href="#友情链接页" class="headerlink" title="友情链接页"></a>友情链接页</h2><p>友情链接页用于展示好友的博客入口，默认关闭，开启需要先在 <code>navbar</code> 项中将 <code>links</code> 的注释(#号)删掉：</p><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span>  <span class="hljs-attr">menu:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;links&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/links/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-link-fill&#x27;</span> &#125;</code></pre><p>然后找到 <code>links</code> 的配置项，对页面内容进行配置：</p><pre><code class="hljs yaml"><span class="hljs-attr">links:</span>  <span class="hljs-attr">items:</span>    <span class="hljs-bullet">-</span> &#123;      <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;Fluid Docs&#x27;</span>,      <span class="hljs-attr">intro:</span> <span class="hljs-string">&#x27;主题使用指南&#x27;</span>,      <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/&#x27;</span>,      <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;/img/favicon.png&#x27;</span>    &#125;</code></pre><ul><li><p><code>title</code>: 友链站的标题</p></li><li><p><code>intro</code>: 站点或博主的简介，可省略</p></li><li><p><code>link</code>: 跳转链接</p></li><li><p><code>image</code>: 头像图片，可省略</p></li></ul><h2 id="404-页"><a href="#404-页" class="headerlink" title="404 页"></a>404 页</h2><p>404 页是在访问不存在的博客链接时，出现的错误提示页面。</p><p>开启此页面需要在博客的部署环境上配置：</p><ul><li><p>如果博客部署在云服务器，需要 Nginx 配置文件设置 <code>error_page 404 = /404.html</code>；</p></li><li><p>如果部署在 Github Pages 上，不需要额外配置，但必须绑定顶级域名才生效；</p></li><li><p>其他 OSS 等平台，请参考各平台关于 404 页的配置文档，但并不是所有平台都支持跳转 Html。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>fluid主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/13/hello-world/"/>
    <url>/2020/10/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
